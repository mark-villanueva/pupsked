import streamlit as st
import pandas as pd
import sqlite3

st.set_page_config(
    page_title="Rooms",
    page_icon="images/PUPLogo.png",
)

# Function to create the 'subjects' table in the database
def create_subjects_table():
    conn = sqlite3.connect("subjects.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS subjects (
            id INTEGER PRIMARY KEY,
            program_name TEXT,
            section TEXT,
            subject_name TEXT,
            hours INTEGER,  -- New column for hours per subject
            room TEXT       -- New column for room assignment
        )
    """)
    conn.commit()
    conn.close()

# Call the function to create the table before running the Streamlit app
create_subjects_table()

# Function to fetch programs from the database
def fetch_programs():
    conn = sqlite3.connect("programs.db")
    c = conn.cursor()
    c.execute("SELECT name FROM programs")
    rows = c.fetchall()
    conn.close()
    return [row[0] for row in rows]

# Function to fetch room assigned to a subject
def fetch_room_assigned(program_name, section, subject_name):
    conn = sqlite3.connect("subjects.db")
    c = conn.cursor()
    c.execute("SELECT room FROM subjects WHERE program_name=? AND section=? AND subject_name=?", (program_name, section, subject_name))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0]
    else:
        return None
    
# Function to retrieve subjects for a given program and section from the database
def fetch_subjects(program_name, section):
    conn = sqlite3.connect("subjects.db")
    c = conn.cursor()
    c.execute("SELECT subject_name, hours, room FROM subjects WHERE program_name=? AND section=?", (program_name, section))  # Included 'hours' and 'room'
    rows = c.fetchall()
    conn.close()
    return rows

# Function to fetch sections for a given program from the database
def fetch_sections(program_name):
    conn = sqlite3.connect("programs.db")
    c = conn.cursor()
    c.execute("SELECT sections FROM programs WHERE name=?", (program_name,))
    row = c.fetchone()
    conn.close()
    if row:
        return row[0].split(",")
    else:
        return []

# Streamlit UI
def main():

    st.sidebar.header("Display Assigned Room")

    selected_program_room = st.sidebar.selectbox("Select Program", fetch_programs(), key="select_program_room")
    selected_section_room = st.sidebar.selectbox("Select Section", fetch_sections(selected_program_room), key="select_section_room")
    selected_subject_room = st.sidebar.selectbox("Select Subject", [row[0] for row in fetch_subjects(selected_program_room, selected_section_room)], key="select_subject_room")  # Fetch only subject names

    assigned_room = fetch_room_assigned(selected_program_room, selected_section_room, selected_subject_room)

    if assigned_room:
       st.sidebar.success(f"The room assigned to '{selected_subject_room}' in {selected_program_room} {selected_section_room} is {assigned_room}")

    else:
        st.sidebar.warning(f"No room assigned for '{selected_subject_room}' in program '{selected_program_room}' and section '{selected_section_room}'")

    st.header("Subjects Overview")

    selected_program_subjects = st.selectbox("Select Program", fetch_programs(), key="select_program_subjects")
    selected_section_subjects = st.selectbox("Select Section", fetch_sections(selected_program_subjects), key="select_section_subjects")
    subjects = fetch_subjects(selected_program_subjects, selected_section_subjects)

    if subjects:
        subject_df = pd.DataFrame(subjects, columns=["Subject Name", "Hours", "Room"])  # Column names for the DataFrame
        st.table(subject_df)
    else:
        st.write("No subjects found for the selected program and section.")


if __name__ == "__main__":
    main()
